module Tests

open System.Text
open Expecto
open Expecto.Flip
open BitThicket.Bitcoin

let test1_k = [|0x1euy; 0x99uy; 0x42uy; 0x3auy; 0x4euy; 0xd2uy; 0x76uy; 0x08uy; 0xa1uy; 0x5auy; 0x26uy; 0x16uy; 0xa2uy; 0xb0uy; 
               0xe9uy; 0xe5uy; 0x2cuy; 0xeduy; 0x33uy; 0x0auy; 0xc5uy; 0x30uy; 0xeduy; 0xccuy; 0x32uy; 0xc8uy; 0xffuy; 0xc6uy;
               0xa5uy; 0x26uy; 0xaeuy; 0xdduy|]
let test1_x = [|0xF0uy; 0x28uy; 0x89uy; 0x2Buy; 0xADuy; 0x7Euy; 0xD5uy; 0x7Duy; 0x2Fuy; 0xB5uy; 0x7Buy; 0xF3uy; 0x30uy; 0x81uy;
               0xD5uy; 0xCFuy; 0xCFuy; 0x6Fuy; 0x9Euy; 0xD3uy; 0xD3uy; 0xD7uy; 0xF1uy; 0x59uy; 0xC2uy; 0xE2uy; 0xFFuy; 0xF5uy;
               0x79uy; 0xDCuy; 0x34uy; 0x1Auy|]
let test1_y = [|0x07uy; 0xCFuy; 0x33uy; 0xDAuy; 0x18uy; 0xBDuy; 0x73uy; 0x4Cuy; 0x60uy; 0x0Buy; 0x96uy; 0xA7uy; 0x2Buy; 0xBCuy;
               0x47uy; 0x49uy; 0xD5uy; 0x14uy; 0x1Cuy; 0x90uy; 0xECuy; 0x8Auy; 0xC3uy; 0x28uy; 0xAEuy; 0x52uy; 0xDDuy; 0xFEuy;
               0x2Euy; 0x50uy; 0x5Buy; 0xDBuy|]
let test1_wif = "5J3mBbAH58CpQ3Y5RNJpUKPE62SQ5tfcvU2JpbnkeyhfsYB1Jcn"
let test1_wifCompressed = "KxFC1jmwwCoACiCAWZ3eXa96mBM6tb3TYzGmf6YwgdGWZgawvrtJ"

[<Tests>]
let tests =
  testList "base58 tests" [
    testCase "encode 'hello'" <| fun _ ->
      let input = Encoding.UTF8.GetBytes("hello")
      let expected = "Cn8eVZg"
      
      Base58.encode input
      |> Expect.sequenceEqual "encoder produced incorrect output" expected
  ]

[<Tests>]
let addressTests =
  testList "address tests" [
    testCase "test1 k => base58Check" <| fun _ ->
      let expected = test1_wif
      
      Address.format Address.VersionPrefix.WIF test1_k
      |> Expect.equal "WIF encoding failed for test1 private key" expected
      
  ]